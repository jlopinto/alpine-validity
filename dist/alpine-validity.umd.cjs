(function(n,r){typeof exports=="object"&&typeof module<"u"?module.exports=r():typeof define=="function"&&define.amd?define(r):(n=typeof globalThis<"u"?globalThis:n||self,n["alpine-validity"]=r())})(this,function(){"use strict";const n=t=>{const s=t.validity,a=t.__messages||t.form.__messages||[],e=t.__controls||t.form.__controls||[];let o=!1;t.setCustomValidity("");for(const i in s)if(!["valid","customError"].includes(i)&&s[i]===!0){o=a[i]||t.validationMessage;break}o||e.find(i=>i(t.value)?!1:(t.setCustomValidity(a[i.name]),o=a[i.name],!0)),t.dispatchEvent(new CustomEvent("validation",{detail:{error:o||"",validity:t.form.checkValidity()},bubbles:!0}))},r=(t,s,a,e)=>{const o=a(s);e(()=>{o(i=>{t.__messages=i})})},l=(t,s,a,e)=>{const o=a(s);e(()=>{o(i=>{t.__controls=i})})},d=(t,s)=>s.bind(t,{"x-data"(){return{__modified:!1,__blurred:!1,get __canCheck(){return this.__modified&&this.__blurred}}},"x-init"(){this.$el.__messages=null,this.$el.__controls=null},"@input.once"({target:a}){s.$data(a).__modified=!0},"@focusout.once"({target:a}){s.$data(a).__blurred=!0}}),c=(t,s)=>{const a=new MutationObserver(([e])=>{const o=Array.from(t.elements).filter(i=>Array.from(e.addedNodes).filter(u=>u.contains(i)).length&&i.tagName!=="BUTTON"&&(i.hasAttribute("x-validity:messages")||i.hasAttribute("x-validity:controls")));o.forEach(i=>d(i,s)),t.dispatchEvent(new CustomEvent("validation",{detail:{validity:t.checkValidity(),appendedControls:o}}))});s.bind(t,{"x-data"(){return{__errors:new Map,messages:[],get __formElements(){return Array.from(this.$el.elements).filter(e=>e.willValidate)}}},"x-init"(){a.observe(this.$el,{childList:!0}),this.__formElements.forEach(e=>{d(e,s)})},":novalidate":!0,"@validation"(e){const o=e.target;o.id&&this.__errors.set(o.id,e.detail.error)},"@submit"(){this.__formElements.forEach(e=>{s.$data(e).__blurred=!0,n(e)})},"@input"({target:e}){s.$data(e).__canCheck&&n(e)},"@focusout"({target:e}){s.$data(e).__canCheck&&n(e)}})};return t=>{t.directive("validity",(s,{value:a,expression:e},{evaluateLater:o,effect:i})=>{switch(a){case"messages":r(s,e,o,i);break;case"controls":l(s,e,o,i);break;default:c(s,t);break}}),t.magic("validity",s=>a=>t.$data(s).__errors.get(a))}});
